{"name":"pg_rep_test","tagline":"A tool to assist with setting up replication in PostgreSQL 9.1+ for the purposes of testing or demonstration.","body":"pg_rep_test\r\n===========\r\n\r\nA tool to assist with setting up replication in PostgreSQL 9.1+ for the purposes of testing or demonstration.\r\n\r\n\tUsage:\r\n\t  pg_rep_test [OPTION]\r\n\t\r\n\tOptions:\r\n\t  -a ARCHIVEDIR          create an archive in the named directory\r\n\t  -d DIRS                comma-separated list of directory names starting with\r\n\t                         primary (default: primary,standby1,standby2,...)\r\n\t  -l LOGFILE             write log messages to a file, but it will not log\r\n\t                         any pre-check messages\r\n\t  -L                     enable database logging in every instance\r\n\t  -p PORTS               comma-separated list of ports to use starting with\r\n\t                         primary (default: 5530,5531,5532,...)\r\n\t  -r REPLICAS            number of replicas to create (default: 1)\r\n\t  -s fan|tree|chain      replication structure (default: fan)\r\n\t                         fan = all standbys connect directly to primary\r\n\t                         tree = one standby connects directly to primary, the\r\n\t                                remaining ones connect to that standby\r\n\t                         chain = no more than one standby connects to any node\r\n\t  -S                     configures all standbys to be synchronous\r\n\t  -T                     don't generate management tool script file to manage the\r\n                                 new instances\r\n\t  -?                     show this help then exit\r\n\r\n\r\n## Example\r\n\r\nTo create 5 standbys, the first one connecting to the primary, and the rest connecting\r\nto the first standby, you would run the following:\r\n\r\n\t./pg_rep_test -r 5 -s tree\r\n\r\nThis would create a directory named \"primary\", and 5 directories named\r\n\"standby1\", \"standby2\"... \"standby5\".  Each standby would be configured\r\nto connect to the first standby, and the first standby would connect\r\nto the primary.\r\n\r\nThis would also produce the following ASCII-diagram which displays the\r\nconfiguration they were created in and the port numbers used:\r\n\r\n\t[Primary (5530)]\r\n\t    |\r\n\t    ---[Standby 1 (5531)]\r\n\t            |\r\n\t            ---[Standby 2 (5532)]\r\n\t            |\r\n\t            ---[Standby 3 (5533)]\r\n\t            |\r\n\t            ---[Standby 4 (5534)]\r\n\t            |\r\n\t            ---[Standby 5 (5535)]\r\n\r\n\r\n## Notes\r\n\r\nYou can run pg_rep_test without any parameters which will then just create a primary\r\nwith a single standby.\r\n\r\nIf a list of ports isn't specified, it will use a list of unused ports starting from\r\n5530.  If a port is in use, the next port will be checked and so on, until every\r\ninstance has a port it can use.\r\n\r\nAll configuration changes that pg_rep_test makes get put into a separate\r\nconfiguration file called custom.conf.  This is then referenced by postgresql.conf\r\nusing an 'include' directive at the end of the file.\r\n\r\nA maintenance tool script is generated automatically after creating a set of\r\ninstances (unless suppressed with -T).  The following section describes its use.\r\n\r\n\r\ntool(_n).pg_rep_test\r\n================\r\n\r\nA maintenance tool script to manage sets of instances created by pg_rep_test.\r\nThe name of the tool is unique to a set of instances.\r\n\r\n\tUsage:\r\n\t  ./tool.pg_rep_test [OPTION] [ACTION]\r\n\r\n\tOptions:\r\n\t  -D DATADIRS            comma-separated list of directories of instances\r\n\t                         to affect\r\n\t  -m MODE                shutdown mode (smart  fast or immediate); must be\r\n\t                         used with the 'stop' action\r\n\t  -l LOGFILE             write log messages to a file\r\n\t  -?                     show this help then exit\r\n\r\n\tACTION can be one of:\r\n\t  status                 shows a list of all managed instances  their ports\r\n\t                         and data directories\r\n\t  start                  start all or specified instances\r\n\t  stop                   stops all or specified instances  which can be used\r\n\t                         with the -m option\r\n\t  restart                restart all or specified instances\r\n\t  destroy                stops (if started) and deletes all or specified\r\n\t                         instances; also deletes this maintenance script\r\n\r\n## Example\r\n\r\nTo stop all instances managed by the tool script immediately, you would run the\r\nfollowing:\r\n\r\n\t./tool.pg_rep_test -m immediate stop\r\n\r\nTo check the status of all instances managed by the script, you would run:\r\n\r\n\t./tool.pg_rep_test status\r\n\r\nThis would produce output similar to the following:\r\n\r\n\tInstance 'primary' on port [5536]: RUNNING\r\n\tInstance 'standby1' on port [5537]: RUNNING\r\n\tInstance 'standby2' on port [5538]: RUNNING\r\n\r\nTo stop and delete all instances, and the tool script itself, you would run:\r\n\r\n\t./tool.pg_rep_test destroy\r\n\r\n## Notes\r\n\r\nIf a set of instances is created by pg_rep_test and a tool.pg_rep_test script\r\nalready exists in the same directory, the tool script will be given a distinct\r\nname.  This is so that multiple tool scripts, each associated with a particular\r\nset of clusters, can exist alongside each other.  So after the first script is\r\ncreated, subsequent ones will be named tool_1.pg_rep_test, tool_2... tool_3...\r\netc.\r\n\r\n## License\r\n\r\npg_rep_test is licensed under The PostgreSQL License\r\n(http://www.opensource.org/licenses/postgresql),\r\nwhich is closely related to the BSD license.\r\n","google":"UA-40085049-1","note":"Don't delete this file! It's used internally to help with page regeneration."}
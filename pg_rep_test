#!/bin/bash

# Default values

DEFAULT_REPLICAS=1 # Default number of replicas
DEFAULT_STARTING_PORT=5530
DEFAULT_REPLICATION_STRUCTURE='fan'

# Run prerequisite checks
prerequisite_commands="initdb psql pg_basebackup pg_ctl lsof getopts rmdir rm sync tput"

missing_counter=0
for required_command in $prerequisite_commands; do
  if ! hash "$required_command" >/dev/null 2>&1; then
    printf "Required command not found in PATH: %s\n" "$required_command" >&2
    ((missing_counter++))
  fi
done

if ((missing_counter > 0)); then
  printf "%d command(s) are missing in PATH, aborting\n" "$missing_counter" >&2
  exit 1
fi


# Get the version details of the current PostgreSQL installation
read PG_MAJOR_VERSION PG_MINOR_VERSION <<<$(postgres -V | grep -Po '\d+?\.\d+?' | cut -d '.' --output-delimiter=' ' -f 1,2)

usage()
{
cat << OPTIONSDOC
Usage:
  $0 [OPTION]

Options:
  -a ARCHIVEDIR          create an archive in the named directory
  -D DATADIRS            comma-separated list of directory names starting with
                         primary (default: primary,standby1,standby2,...)
  -i                     prompt for input of options interactively
  -l LOGFILE             write log messages to a file, but it will not log
                         any pre-check messages
  -L                     enable database logging in every instance
  -p PORTS               comma-separated list of ports to use starting with
                         primary (default: \
$DEFAULT_STARTING_PORT,\
`expr $DEFAULT_STARTING_PORT + 1`,\
`expr $DEFAULT_STARTING_PORT + 2`,...)
  -r REPLICAS            number of replicas to create (default: 1)
  -s fan|tree|chain      replication structure (default: fan)
                         fan = all standbys connect directly to primary
                         tree = one standby connects directly to primary, the
                                remaining ones connect to that standby
                         chain = no more than one standby connects to any node
  -S                     configures all standbys to be synchronous
  -T                     don't generate management tool script file to manage
                         the new instances
  -?                     show this help then exit
OPTIONSDOC
}

while getopts “a:D:il:Lp:r:s:ST?” OPTION
do
  case $OPTION in
    a)
      ARCHIVE_DIR=$OPTARG
      ;;
    D)
      DATADIRS=$OPTARG
      ;;
    i)
      INTERACTIVE=true
      ;;
    l)
      LOG_FILE=$OPTARG
      ;;
    L)
      ENABLE_LOGS=true
      ;;
    p)
      PORTS=$OPTARG
      ;;
    r)
      REPLICAS=$OPTARG
      ;;
    s)
      REPSTRUCT=$OPTARG
      ;;
    S)
      SYNCHRONOUS=true
      ;;
    T)
      TOOL=false
      ;;
    ?)
      usage
      exit 1
      ;;
  esac
done


# Configure colour variables if outputting to the terminal
if [ -t 1 ]
then
  BLUE='\e[1;94m'
  GREEN='\e[1;32m'
  RED='\e[1;31m'
  YELLOW='\e[1;93m'
  PLAIN=$(tput sgr0)
fi

ERROR_TEXT="$RED"'Error'"$PLAIN"

# Generate a list of unused ports to run instances on.
generate_ports()
{
  AUTO_PORT_LIST=()

  for (( PORT=$DEFAULT_STARTING_PORT, PORT_COUNT=0; PORT_COUNT <= $REPLICAS; PORT++ ))
  do
    # Check if the port is currently being used.
    if lsof -i:$PORT > /dev/null
    then
      continue; # port in use, so try next one
    else
      AUTO_PORT_LIST+=($PORT)
      PORT_COUNT=$[PORT_COUNT + 1];
    fi
  done
}

# Generate a list of unused directory names in which to generate instances.
generate_dirs()
{
  # If the primary directory already exists, suffix a number and try again.
  while [[ $(ls -A "primary"${SUBSET:+'_'$SUBSET} 2> /dev/null) ]]
  do
    ((SUBSET++))
  done
  AUTO_DIR_LIST[0]="primary"${SUBSET:+'_'$SUBSET}
  unset SUBSET

  # Generate a standby directory for each replica.
  for (( REPLICA=1; REPLICA <= $REPLICAS; REPLICA++ ))
  do
    # If the standby directory already exists, suffix a number and try again.
    while [[ $(ls -A "standby$REPLICA"${SUBSET:+'_'$SUBSET} 2> /dev/null) ]]
    do
      ((SUBSET++))
    done
    AUTO_DIR_LIST[$REPLICA]="standby$REPLICA"${SUBSET:+'_'$SUBSET}
    unset SUBSET
  done
}

# Output a summary of the current settings.
settings_summary()
{
  # Note that a 3rd value passed to output_report here has a coalescing effect
  # where if the 2nd one is empty, the 3rd is accepted as the 2nd parameter.
  echo "==== SETTINGS SUMMARY ===="
  output_report "Replicas" $REPLICAS
  output_report "Ports" "${PORT_LIST[*]}"
  output_report "Directories" "${DIR_LIST[*]}"
  output_report "Archive dir" $ARCHIVE_DIR "[None]"
  output_report "Replication structure" $REPSTRUCT
  output_report "Synchronous" $SYNCHRONOUS
  output_report "Database logging" $ENABLE_LOGS
  output_report "Log file" $LOG_FILE
  echo -e "==========================\n"

  # If no parameters were provided, these are considered the defaults, so
  # allow the user to decide whether they want to change anything.
  if [ $# -eq 0 ] && [[ $INTERACTIVE == true ]]
  then
    echo "Do you want to use these values or input your own?"
    select yn in "Use these values" "Customise"; do
      case $yn in
          "Use these values" ) break;;
          "Customise" ) request_params; settings_summary; break;;
      esac
    done
  fi
}

# Request user-input to modify default parameters.
request_params()
{
  # Input number of replicas
  while true
  do
    INPUT_REPLICAS=0

    echo # newline
    read -p "How many replicas do you want in addition to the primary? [default:${REPLICAS:-$DEFAULT_REPLICAS}] " INPUT_REPLICAS

    check_replica_count_numeric $INPUT_REPLICAS

    if [[ $? -eq 0 ]]
    then
      # If there is a new number of replicas, regenerate the default ports and
      # directories.
      if [[ $INPUT_REPLICAS -ne 0 ]] &&
         [[ $INPUT_REPLICAS -ne ${REPLICAS:-$DEFAULT_REPLICAS} ]]
      then
        unset PORT_LIST DIR_LIST

        REPLICAS=${INPUT_REPLICAS:-${REPLICAS:-$DEFAULT_REPLICAS}}

        generate_ports
        generate_dirs

        PORT_LIST=(${PORT_LIST[*]:-${AUTO_PORT_LIST[@]}})
        DIR_LIST=(${DIR_LIST[*]:-${AUTO_DIR_LIST[@]}})
      fi
      break
    fi
  done


  # Input port list
  while true
  do
    INPUT_PORTS=()

    echo # newline
    read -p "Input comma-separated list of ports: [default:${PORT_LIST[*]}] " INPUT_PORTS

    INPUT_PORTS=(${INPUT_PORTS[*]:-${PORT_LIST[@]}})
    check_port_count "${INPUT_PORTS[*]}"

    if [[ $? -eq 0 ]]
    then
      check_ports_numeric "${INPUT_PORTS[*]}"
    else
      continue
    fi

    if [[ $? -eq 0 ]]
    then
      PORT_LIST=(${INPUT_PORTS[*]})
      break;
    fi
  done

  # Input instance directory list
  while true
  do
    INPUT_DIRS=()

    echo # newline
    read -p "Input comma-separated list of directories: [default:${DIR_LIST[*]}] " INPUT_DIRS

    INPUT_DIRS=(${INPUT_DIRS[*]:-${DIR_LIST[@]}})

    check_directory_count "${INPUT_DIRS[*]}"

    if [[ $? -eq 0 ]]
    then
      check_directory_usage "${INPUT_DIRS[*]}"
    else
      continue
    fi

    if [[ $? -eq 0 ]]
    then
      DIR_LIST=(${INPUT_DIRS[*]})
      break;
    fi
  done

  # Input archive directory
  while true
  do
    INPUT_ARCHIVE_DIR=''

    echo # newline
    read -p "Input archive directory (leave blank to disable archiving): [default:${INPUT_ARCHIVE_DIR:-${ARCHIVE_DIR:-(disabled)}}] " INPUT_ARCHIVE_DIR

    check_archive_dir_usage $INPUT_ARCHIVE_DIR

    if [[ $? -eq 0 ]]
    then
      ARCHIVE_DIR=$INPUT_ARCHIVE_DIR
      break;
    fi

    break;
  done

  # Input replication structure
  echo # newline
  echo "Select a replication structure: [current value:${INPUT_REPSTRUCT:-${REPSTRUCT:-$DEFAULT_REPLICATION_STRUCTURE}}]"

  select INPUT_REPSTRUCT in "fan" "tree" "chain"; do
    case $INPUT_REPSTRUCT in
      "fan" | "tree" | "chain" ) REPSTRUCT=$INPUT_REPSTRUCT; break;;
    esac
  done

  # Input replication durability

  if [[ $SYNCHRONOUS == true ]]; then
    REPLICATION_DURABILITY="synchronous"
  else
    REPLICATION_DURABILITY="asynchronous"
  fi

  echo # newline
  echo "Select replication durability: [current value:$REPLICATION_DURABILITY]"
  select INPUT_REPLICATION_DURABILITY in "asynchronous" "synchronous"; do
    case $INPUT_REPLICATION_DURABILITY in
      "asynchronous" ) SYNCHRONOUS=false; break;;
      "synchronous" ) SYNCHRONOUS=true; break;;
    esac
  done

  # Enable/disable database logging
  if [[ $ENABLE_LOGS == true ]]; then
    DATABASE_LOGGING_ENABLED="yes"
  else
    DATABASE_LOGGING_ENABLED="no"
  fi

  echo # newline
  echo "Do you want to enable logging on each database instance? [current value:$DATABASE_LOGGING_ENABLED]"
  select INPUT_DATABASE_LOGGING in "yes" "no"; do
    case $INPUT_DATABASE_LOGGING in
      "yes" ) ENABLE_LOGS=true; break;;
      "no" ) ENABLE_LOGS=false; break;;
    esac
  done

  # Input script log file
  while true
  do
    INPUT_LOG_FILE=''

    echo # newline
    read -p "Input script log file name (leave blank to pipe to /dev/null): [default:${INPUT_LOG_FILE:-/dev/null}] " INPUT_LOG_FILE

    LOG_FILE=${INPUT_LOG_FILE:-/dev/null}

    break;
  done
}

build_ascii_report()
{
  CURRENT_LEVEL=$INSTANCE

  # Indent everything according to replication structure.
  if [[ $CURRENT_LEVEL -eq 1 ]]
  then
    ASCII_REPORT="\n[Primary (${PORT_LIST[0]})]\n"
  else
    case $REPSTRUCT in
      fan)
        INDENT=1
        ;;
      tree)
        if [[ $CURRENT_STANDBY -eq 1 ]]
        then
          INDENT=1
        else
          INDENT=2
        fi
        ;;
      chain)
        INDENT=$CURRENT_STANDBY
        ;;
    esac

    SPACER=""
    for (( I=1; I <= $INDENT; I++ ))
    do
      SPACER=$SPACER"    "
      if [[ $I -gt 1 ]]
      then
        SPACER=$SPACER"    "
      fi
    done
    ASCII_REPORT=$ASCII_REPORT$SPACER"|\n"
    ASCII_REPORT=$ASCII_REPORT$SPACER"---[Standby $CURRENT_STANDBY (${PORT_LIST[$CURRENT_STANDBY]})]\n"

  fi
}

# Output text to a log file, prepending the date and time.
# Parameter 1 (optional): Contains 'STDOUT' if the entry should be displayed.
write_log()
{
  OUTPUT=$1
  NONEWLINE=$2

  if [[ $NONEWLINE == 'NONEWLINE' ]]
  then
    OPTION='-n'
  else
    OPTION=''
  fi

  while IFS= read -r LINE
  do
    if [[ $OUTPUT == STDOUT ]]
    then
        echo $OPTION $LINE
    fi

    echo "$(date +\%Y-\%m-\%d\ \%H:\%M:\%S) $LINE" >> $LOG_FILE
  done
}

# Writes a coloured title followed by its value
# Parameter 1: Title to be output in colour
# Parameter 2: Value
output_report()
{
  TITLE=$1
  VALUE=$2

  echo -ne "$BLUE  $TITLE: $PLAIN"
  echo $VALUE
}

# Based on the status provided, reports SUCCESS or FAILED
# Parameter 1: The exit code of the process being reported
report_status()
{
  STATUS=$1

  if [[ $STATUS -eq '0' ]] && [[ -n $STATUS ]]
  then
    echo -ne $GREEN # green
    echo -e " SUCCESS!" | write_log STDOUT NONEWLINE
  else
    echo -ne $RED # red
    echo -e " FAILED!" | write_log STDOUT NONEWLINE
  fi
  echo $PLAIN # reset colours

  return $STATUS
}


## Validation check functions

check_version_support()
{
  # Check that we're using a supported version
  if ( [[ PG_MAJOR_VERSION -eq 9 ]] && [[ PG_MINOR_VERSION -eq 0 ]] ) || [[ PG_MAJOR_VERSION -lt 9 ]]
  then
    echo -e "$ERROR_TEXT: Only PostgreSQL 9.1 and above is supported.  You are using"\
         "PostgreSQL $PG_MAJOR_VERSION.$PG_MINOR_VERSION"
    exit 1
  fi
}

check_replica_count_numeric()
{
  local INPUT_REPLICAS=$1
  local FATAL=${2:-false}
  # Check that the replicas value is numeric if provided.
  if [[ -n $INPUT_REPLICAS ]] && ! [[ $INPUT_REPLICAS =~ ^[0-9]+$ ]]
  then
    echo -e "$ERROR_TEXT: The number of replicas must be a numeric value."
    if $FATAL;then exit 1;else return 1;fi
  fi
}

check_replication_structure()
{
  # Validate replication structure value.
  if [[ -n $REPSTRUCT ]]
  then
    case $REPSTRUCT in
      fan|tree|chain)
        ;;
      * )
        echo -e "$ERROR_TEXT: Invalid replica structure specified."
        exit 1
    esac
  fi
}

check_cascading_replication_support()
{
  # Throw an error if any attempt to use a cascading replication feature prior to
  # PostgreSQL 9.2.
  if ( [[ PG_MAJOR_VERSION -eq 9 ]] && [[ PG_MINOR_VERSION -lt 2 ]] ) && [[ $REPSTRUCT != 'fan' ]]
  then
    echo -e "$ERROR_TEXT:  The replication structure '$REPSTRUCT' is not supported prior to"\
         "PostgreSQL 9.2 as it requires cascading replication."
    exit 1
  fi
}

check_port_count()
{
  local INPUT_PORT_LIST=($1)
  local FATAL=${2:-false}

  # Ensure that the number of ports equals the number of replicas plus the
  # primary.
  if [[ -n $REPLICAS ]] && [[ -n $INPUT_PORT_LIST ]] && [[ ${#INPUT_PORT_LIST[*]} -ne `expr $REPLICAS + 1` ]]
  then
    echo -e "$ERROR_TEXT: The number of ports provided does not match the number of replicas + primary."
    if $FATAL;then exit 1;else return 1;fi
  fi
}

check_ports_numeric()
{

  local INPUT_PORTS=($1)
  local FATAL=${2:-false}

  for PORT in ${INPUT_PORTS[@]}
  do
    # Check that the port value is numeric if provided.
    if [[ -n $PORT ]] && ! [[ $PORT =~ ^[0-9]+$ ]]
    then
      echo -e "$ERROR_TEXT:  Invalid port '$PORT'. Port values must be numeric."
      if $FATAL;then exit 1;else return 1;fi
    fi
  done
}

check_port_usage()
{
  # Check that the ports listed aren't already in use.
  for PORT in ${PORT_LIST[@]}
  do
    if lsof -i:$PORT > /dev/null
    then
      echo -e "$ERROR_TEXT:  Port $PORT already in use.  Specify a list of unused ports with the -p option, or omit this parameter to auto-select ports."
      exit 1
    fi
  done
}

check_directory_count()
{
  local INPUT_DIR_LIST=($1)
  local FATAL=${2:-false}

  # Check that the number of directories is equal to the number of standbys plus
  # the primary.
  if [[ -n $REPLICAS ]] && [[ -n $INPUT_DIR_LIST ]] && [[ ${#INPUT_DIR_LIST[@]} -ne `expr $REPLICAS + 1` ]]
  then
    echo -e "$ERROR_TEXT: The number of directories provided does not match a primary + the number of replicas."
    if $FATAL;then exit 1;else return 1;fi
  fi
}

check_directory_usage()
{
  # Check each directory to see if it's empty if it already exists.
  for DIR in ${DIR_LIST[@]}
  do
    # Check for duplicate directory names in supplied list
    if [[ `echo ${DIR_LIST[*]} | grep -ow $DIR | wc -l` -gt 1 ]]
    then
       echo -e "$ERROR_TEXT: The directory '$DIR' is specified more than once in the provided list."
       if $FATAL;then exit 1;else return 1;fi
    fi

    if [[ -d $DIR ]]
    then
      if [[ $(ls -A $DIR) ]]
      then
        echo -e "$ERROR_TEXT: The directory '$DIR' already exists and is not empty."
        if $FATAL;then exit 1;else return 1;fi
      fi
    fi
  done
}

check_archive_dir_usage()
{
  local INPUT_ARCHIVE_DIR=$1
  local FATAL=${2:-false}

  if [[ -d $INPUT_ARCHIVE_DIR ]]
  then
    if [[ $(ls -A $INPUT_ARCHIVE_DIR) ]]
    then
      echo -e "$ERROR_TEXT: The archive directory '$INPUT_ARCHIVE_DIR' already exists and is not empty."
      if $FATAL;then exit 1;else return 1;fi
    fi
  fi
}



########## CREATE TOOL CODE BEGIN  ##########

create_tool()
{
IFS=" "
FILE_HEADER=$(cat <<TOOL_CONFIG
#!/bin/bash

# instance data associated with this maintenance script
DATADIRS=(${DIR_LIST[*]})
PORTS=(${PORT_LIST[*]})
ARCHIVE_DIR=${ARCHIVE_DIR:-''}
TOOL_CONFIG
)

IFS=""
FILE_BODY=$(cat <<'TOOL_FILE'
usage()
{
cat << OPTIONSDOC

Usage:
  $0 [OPTION] [ACTION]

Options:
  -m MODE                shutdown mode (smart, fast or immediate); must be
                         used with the 'stop' action
  -l LOGFILE             write log messages to a file
  -?                     show this help then exit

ACTION can be one of:
  status                 list all instances, their ports, data directories and
                         whether they are running or not
  start                  start all instances
  stop                   stops all instances, which can be used with the -m 
                         option
  restart                restart all instances
  destroy                stops (if started) and deletes all instances; also
                         deletes this maintenance script
OPTIONSDOC
}

# Configure colour variables if outputting to the terminal
if [ -t 1 ]
then
  BLUE='\e[1;94m'
  GREEN='\e[1;32m'
  RED='\e[1;31m'
  PLAIN=$(tput sgr0)
fi

while getopts “m:l:?” OPTION
do
  case $OPTION in
    m)
      MODE=$OPTARG
      ;;
    l)
      LOG_FILE=$OPTARG
      ;;
    ?)
      usage
      exit 1
      ;;
  esac
done

ACTION=${!#}
MODE=${MODE:-'smart'}

# Set default for log output
if [[ -z $LOG_FILE ]]
then
  LOG_FILE='/dev/null'
fi

# Output text to a log file, prepending the date and time.
# Parameter 1 (optional): Contains 'STDOUT' if the entry should be displayed.
write_log()
{
  OUTPUT=$1
  NONEWLINE=$2

  if [[ $NONEWLINE == 'NONEWLINE' ]]
  then
    OPTION='-n'
  else
    OPTION=''
  fi

  while IFS= read -r LINE
  do
    if [[ $OUTPUT == STDOUT ]]
    then
        echo $OPTION $LINE
    fi

    echo $(date +\%Y-\%m-\%d\ \%H:\%M:\%S) $LINE >> $LOG_FILE
  done
}

# Based on the status provided, reports SUCCESS or FAILED
# Parameter 1: The exit code of the process being reported
report_status()
{
  STATUS=$1

  if [[ $STATUS -eq '0' ]] && [[ -n $STATUS ]]
  then
    echo -ne $GREEN # green
    echo -e ' SUCCESS!' | write_log STDOUT NONEWLINE
  else
    echo -ne $RED # red
    echo -e ' FAILED!' | write_log STDOUT NONEWLINE
  fi
  echo $PLAIN # reset colours

  return $STATUS
}

status()
{
  for (( I=0; I < ${#DATADIRS[@]}; I++ ))
  do
    echo -n "Instance '${DATADIRS[$I]}' on port [${PORTS[$I]}]: "
    echo "pg_ctl status -D ${DATADIRS[$I]}" | write_log
    pg_ctl status -D ${DATADIRS[$I]} >> $LOG_FILE
    case $? in
      0)
        echo -e $GREEN'RUNNING'$PLAIN
        ;;
      3)
        echo -e $RED'NOT RUNNING'$PLAIN
        ;;
    esac
  done
}

destroy()
{
  for INSTANCE in ${DATADIRS[@]}
  do
    pg_ctl -D $INSTANCE status >> $LOG_FILE
    if [[ $? -eq '0' ]]
    then
      # Stop the instance before we delete it.
      echo -e "Stopping instance in '$INSTANCE'..." | write_log STDOUT NONEWLINE
      echo 'pg_ctl stop -D '$INSTANCE' -m immediate' | write_log
      pg_ctl stop -D $INSTANCE -m immediate &>> $LOG_FILE
      sync

      # Get the status to ensure it has stopped.
      echo "pg_ctl status -D $INSTANCE" | write_log
      pg_ctl status -D $INSTANCE >> $LOG_FILE
      if [[ $? -eq '3' ]]
      then
        report_status '0'
      fi
    else
      echo "Instance in '$INSTANCE' already stopped." | write_log STDOUT
    fi

    # Delete the current instance.
    echo -e "Deleting instance in '$INSTANCE'..." | write_log STDOUT NONEWLINE
    echo 'rm -r '$INSTANCE'/*' | write_log
    rm -r $INSTANCE/* &>> $LOG_FILE
    echo 'rmdir '$INSTANCE | write_log
    rmdir $INSTANCE &>> $LOG_FILE
    report_status $?
  done

  # Delete archive directory recursively, if it exists.
  if [[ $ARCHIVE_DIR != '' ]]
  then
    echo -e "Deleting archive in '$ARCHIVE_DIR'..." | write_log STDOUT NONEWLINE
    echo 'rm -rf '$ARCHIVE_DIR'/*' | write_log
    rm -rf $ARCHIVE_DIR/* &>> $LOG_FILE
    echo 'rmdir '$ARCHIVE_DIR | write_log
    rmdir $ARCHIVE_DIR &>> $LOG_FILE
    report_status $?
  fi

  # Delete the tool script itself
  echo -e "Deleting this tool script..." | write_log STDOUT NONEWLINE
  echo 'rm '$0 | write_log
  rm $0 &>> $LOG_FILE
  report_status $?
}

start()
{
  for INSTANCE in ${DATADIRS[@]}
  do
    pg_ctl -D $INSTANCE status >> $LOG_FILE
    if [[ $? -ne '0' ]]
    then
      echo -e "Starting instance in '$INSTANCE'..." | write_log STDOUT NONEWLINE
      echo 'pg_ctl start -D '$INSTANCE | write_log
      pg_ctl start -D $INSTANCE &>> $LOG_FILE
      sync
      echo "pg_ctl status -D $INSTANCE" | write_log
      pg_ctl status -D $INSTANCE >> $LOG_FILE
      report_status $?
    else
      echo "Instance in '$INSTANCE' already started." | write_log STDOUT
    fi
  done
}

stop()
{
  for INSTANCE in ${DATADIRS[@]}
  do
    pg_ctl -D $INSTANCE status >> $LOG_FILE
    if [[ $? -eq '0' ]]
    then
      echo -e "Stopping instance in '$INSTANCE'..." | write_log STDOUT NONEWLINE
      echo 'pg_ctl stop -D '$INSTANCE' -m '$MODE | write_log
      pg_ctl stop -D $INSTANCE -m $MODE &>> $LOG_FILE
      report_status $?
    else
      echo "Instance in '$INSTANCE' already stopped." | write_log STDOUT
    fi
  done
}

restart()
{
  for INSTANCE in ${DATADIRS[@]}
  do
      echo -e "Restarting instance in '$INSTANCE'..." | write_log STDOUT NONEWLINE
      echo 'pg_ctl restart -D '$INSTANCE | write_log
      pg_ctl restart -D $INSTANCE &>> $LOG_FILE
      sync
      echo "pg_ctl status -D $INSTANCE" | write_log
      pg_ctl status -D $INSTANCE >> $LOG_FILE
      report_status $?
  done
}

case $ACTION in
  destroy)
    destroy
    ;;
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart)
    restart
    ;;
  status)
    status
    ;;
  * )
    echo 'Error: Invalid action '$ACTION' specified.'
    usage
    exit 1
esac
TOOL_FILE
)

while [[ $(ls -A "tool"${SUBSET:+'_'$SUBSET}".pg_rep_test" 2> /dev/null) ]]
do
  ((SUBSET++))
done
TOOL_FILENAME="tool"${SUBSET:+'_'$SUBSET}".pg_rep_test"
unset SUBSET

echo $FILE_HEADER > $TOOL_FILENAME
echo $FILE_BODY >> $TOOL_FILENAME
chmod u+x $TOOL_FILENAME

echo -e "The maintenance tool script for these instances is '$TOOL_FILENAME'." | write_log STDOUT
echo -e "Run $YELLOW./$TOOL_FILENAME -?$PLAIN for help with using it."
}

########## CREATE TOOL CODE END  ##########




IFS=","
PORT_LIST=($PORTS)
DIR_LIST=($DATADIRS)

check_version_support

# From PostgreSQL 9.3, initdb accepts the -N parameter which tells it not to
# wait for files to be written to disk. We can do this as we're creating
# disposable databases anyway.
if ( [[ PG_MAJOR_VERSION -eq 9 ]] && [[ PG_MINOR_VERSION -ge 3 ]] ) || [[ PG_MAJOR_VERSION -gt 9 ]]
then
  INITDB_NOSYNC='-N'
fi

#### Validate parameters ####

# Set default number of replicas to 1.
if [[ -z $REPLICAS ]]
then
  REPLICAS=1
fi

check_replica_count_numeric $REPLICAS true

# Set default for log output
if [[ -z $LOG_FILE ]]
then
  LOG_FILE='/dev/null'
fi

check_replication_structure
check_cascading_replication_support

# If a list of ports hasn't been specified, generate the list of ports.
if [[ -z $PORTS ]]
then
  generate_ports
else
  check_port_usage "${PORT_LIST[*]}" true
fi

check_directory_count "${DIR_LIST[*]}" true

# If a list of directories was not explicitly specified, generate the default
# directory names.
if [[ -z $DATADIRS ]]
then
  generate_dirs
else
  check_directory_usage "${DIR_LIST[*]}" true
fi

check_archive_dir_usage $ARCHIVE_DIR true

# Set default values where necessary

DIR_LIST=(${DIR_LIST[*]:-${AUTO_DIR_LIST[@]}})
ENABLE_LOGS=${ENABLE_LOGS:-false}
INTERACTIVE=${INTERACTIVE:-false}
PORT_LIST=(${PORT_LIST[*]:-${AUTO_PORT_LIST[@]}})
REPSTRUCT=${REPSTRUCT:-$DEFAULT_REPLICATION_STRUCTURE}
SYNCHRONOUS=${SYNCHRONOUS:-false}


check_port_count "${PORT_LIST[*]}" true
check_ports_numeric "${PORT_LIST[*]}" true

#### Set up instances ####

IFS=" "
echo "Command issued: $0 $*" > $LOG_FILE
IFS=","

settings_summary

INSTANCES=`expr $REPLICAS + 1`

# Create directories.
mkdir -p -m 0700 ${DIR_LIST[@]} &>> /dev/null

if [[ $? -ne 0 ]]
then
  echo "Error: Unable to create directory '$DIR'."
  exit 1
fi

# If the directory already existed, the permissions may not be correct
# so apply what's necessary for a database cluster.
chmod 0700 ${DIR_LIST[@]} &>> /dev/null

# Create archive directory
if [[ -n $ARCHIVE_DIR ]]
then
  mkdir -p -m 0700 $ARCHIVE_DIR

  # Check that the archive directory can be written to.  We can get away with
  # trying to create it first because if the directory already existed but
  # we don't have permissions to write to it, mkdir will act as if it succeeded.
  if ! [[ -w $ARCHIVE_DIR ]]
  then
    echo "Error: The archive directory '$ARCHIVE_DIR' doesn't have write permissions."
    exit 1
  fi
fi

# Initialise the primary and create standbys.

for (( INSTANCE=1; INSTANCE <= $INSTANCES; INSTANCE++ ))
do
  CURRENT_STANDBY=`expr $INSTANCE - 1`
  MAX_WAL_SENDERS=0
  DIR=${DIR_LIST[$CURRENT_STANDBY]}

  # Create the primary and create standby from base backup of primary.
  if [[ $INSTANCE -eq 1 ]]
  then
    echo -e "Creating primary in '$DIR'..." | write_log STDOUT NONEWLINE
    echo "initdb $INITDB_NOSYNC -D $DIR -E 'UTF8'" | write_log
    initdb $INITDB_NOSYNC -D $DIR -E 'UTF8' &>> $LOG_FILE
    report_status $?

    if [[ $? -ne 0 ]]
    then
      echo "Error: Unable to create primary."
      exit 1
    fi

    # Add an include to pull in the custom configuration contained in
    # custom.conf.
    echo "include 'custom.conf'" 2>> $LOG_FILE 1>> $DIR/postgresql.conf
    echo -e "# This file contains custom configuration changes made by pg_rep_test\n" 2>> $LOG_FILE 1>>$DIR/custom.conf

    # Reduce the resource requirements to enable a large number of standbys.
    echo -e "shared_buffers = 8MB       # This is set low to allow a large number of standbys to be set up\n" 2>> $LOG_FILE 1>> $DIR/custom.conf

    if $ENABLE_LOGS
    then
      echo -e "logging_collector = on\n" 2>> $LOG_FILE 1>> $DIR/custom.conf
    fi

    # Define list of standbys.  We want to set this up in the primary prior to
    # base backup so that any promoted standby can use the same list.
    if $SYNCHRONOUS
    then
      SYNC_STANDBY_LIST='standby1'
      for (( SYNC_STANDBY=2; SYNC_STANDBY <= $REPLICAS; SYNC_STANDBY++ ))
      do
        SYNC_STANDBY_LIST=$SYNC_STANDBY_LIST",standby$SYNC_STANDBY"
      done
        echo -e "synchronous_standby_names = '$SYNC_STANDBY_LIST'\n" 2>> $LOG_FILE 1>> $DIR/custom.conf
    fi

    if [[ -n $ARCHIVE_DIR ]]
    then
      echo -e "archive_mode = on\n" 2>> $LOG_FILE 1>> $DIR/custom.conf
      echo -e "$(echo archive_command = \'cp \"%p\" \"`readlink -f $ARCHIVE_DIR`/%f\"\')\n" 2>> $LOG_FILE 1>> $DIR/custom.conf
    fi

    # Create a copy of the custom config before we modify it further
    # because the remaining settings should only apply to the primary.
    # Every standby will use this copy.
    echo "cp $DIR/custom.conf{,.template}" | write_log
    cp $DIR/custom.conf{,.template} 2>> $LOG_FILE
  elif [[ $CURRENT_STANDBY -eq 1 ]]
  then
    echo -e "Creating standby $CURRENT_STANDBY from primary in '$DIR'..." | write_log STDOUT NONEWLINE
    echo "pg_basebackup -D $DIR -h localhost -p ${PORT_LIST[0]} -U rep_user" | write_log
    pg_basebackup -D $DIR -h localhost -p ${PORT_LIST[0]} -U rep_user &>> $LOG_FILE

    report_status $?

    if [[ $? -ne 0 ]]
    then
      continue
    fi

    # Restore the copy of the config for the standby as we want a
    # copy without any primary-specific modifications.
    mv $DIR/custom.conf{.template,}
    if [[ -n $ARCHIVE_DIR ]]
    then
      echo -e "$(echo restore_command = \'cp \"`readlink -f $ARCHIVE_DIR`/%f\" \"%p\"\')" 2>> $LOG_FILE 1>> $DIR/recovery.conf
    fi

    # Now that we've got one base backup, we can just copy it for every remaining standby.
    if [[ $REPLICAS -gt 1 ]]
    then
      for (( STANDBY=2; STANDBY<=$REPLICAS; STANDBY++ ))
      do
        echo -e "Creating copy of standby 1 for standby $STANDBY in '${DIR_LIST[$STANDBY]}'..." | write_log STDOUT NONEWLINE
        echo "cp -r $DIR/. ${DIR_LIST[$STANDBY]}" | write_log
        cp -r "$DIR/." "${DIR_LIST[$STANDBY]}" 2>> $LOG_FILE

        report_status $?

        if [[ $? -ne 0 ]]
        then
          continue
        fi
      done
    fi
  fi

  build_ascii_report

  # Set max_wal_senders appropriately so that it has a sufficient amount to
  # serve the standbys that will subscribe to it.
  case $REPSTRUCT in
    fan)
      # Only the primary will be sending WAL.
      if [[ $INSTANCE -eq 1 ]]
      then
        MAX_WAL_SENDERS=`expr $REPLICAS + 3`
      fi
      ;;
    tree)
      # Only the primary and 1st standby will be sending WAL.
      case $INSTANCE in
        1)
          MAX_WAL_SENDERS=3
          ;;
        2)
          MAX_WAL_SENDERS=`expr $REPLICAS + 2`
          ;;
      esac
      ;;
    chain)
      # The primary and every standby except the last will be sending WAL.
      if [[ $INSTANCE -lt `expr $REPLICAS + 1` ]]
      then
         MAX_WAL_SENDERS=3
      fi
      ;;
  esac

  # Configure to replicate.
  echo -e "wal_level = 'hot_standby'  # This needs to be set to 'hot_standby' so that standbys can be connected to\n" 2>> $LOG_FILE 1>> $DIR/custom.conf
  echo -e "port = ${PORT_LIST[$CURRENT_STANDBY]}\n" 2>> $LOG_FILE 1>> $DIR/custom.conf

  # Only set up streaming replication configuration for instances that will
  # use it.
  if [[ $MAX_WAL_SENDERS > 0 ]]
  then
    echo -e "max_wal_senders = $MAX_WAL_SENDERS        # This is set to number of subscribing standbys + 1.  This then allows use\n" \
         "                          # of tools like pg_basebackup that also uses streaming replication.\n"  2>> $LOG_FILE 1>> $DIR/custom.conf
    echo "wal_keep_segments = 32" 2>> $LOG_FILE 1>> $DIR/custom.conf

    if [[ $INSTANCE -eq 1 ]]
    then
      # Add authentication entries to replicate to a slave.
      echo "local   replication     rep_user                           trust" 2>> $LOG_FILE 1>> $DIR/pg_hba.conf
      echo "host    replication     rep_user   127.0.0.1/32            trust" 2>> $LOG_FILE 1>> $DIR/pg_hba.conf
      echo "host    replication     rep_user   ::1/128                 trust" 2>> $LOG_FILE 1>> $DIR/pg_hba.conf
    fi
  fi

  # Set all standbys to be hot standbys.
  if [[ $INSTANCE -ne 1 ]]
  then
    echo "hot_standby = on           # Needed to allow connection to this standby" 2>> $LOG_FILE 1>> $DIR/custom.conf
    echo "standby_mode = 'on'" 2>> $LOG_FILE 1>> $DIR/recovery.conf
    echo "recovery_target_timeline = 'latest'" 2>> $LOG_FILE 1>> $DIR/recovery.conf

    case $REPSTRUCT in
      fan)
        # All standbys subscribe to the primary directly.
        SUBSCRIBE_PORT=${PORT_LIST[0]}
        ;;
      tree)
        # Only the 1st standby subscribes directly to the primary. The rest
        # subscribe to the 1st standby.
        case $INSTANCE in
        2)
          SUBSCRIBE_PORT=${PORT_LIST[0]}
          ;;
        *)
          SUBSCRIBE_PORT=${PORT_LIST[1]}
          ;;
        esac
        ;;
      chain)
        # Every standby subscribes to the previous standby, or primary in the
        # case of the 1st standby.
        SUBSCRIBE_PORT=${PORT_LIST[`expr $INSTANCE - 2`]}
        ;;
    esac
    echo "primary_conninfo = 'host=127.0.0.1 user=rep_user port=$SUBSCRIBE_PORT application_name=standby$CURRENT_STANDBY'" 2>> $LOG_FILE 1>> $DIR/recovery.conf
  fi

  # Start the instance now that it's been configured.
  if [[ $INSTANCE -eq 1 ]]
  then
    echo "Starting primary..." | write_log STDOUT NONEWLINE
    echo "pg_ctl -D $DIR start" | write_log
    pg_ctl -D $DIR -s start >> $LOG_FILE
  else
    echo -e "Starting standby $CURRENT_STANDBY..." | write_log STDOUT NONEWLINE
    echo "pg_ctl -D $DIR start" | write_log
    pg_ctl -D $DIR -s start >> $LOG_FILE
  fi

  # Ensure everything is flushed to disk before checking whether the service
  # is up and running
  sync

  # Test that the primary or standby has started successfully.
  pg_ctl -D $DIR status >> $LOG_FILE
  report_status $?

  # If the primary fails, there's no point in continuing.
  if [[ $? -ne 0 ]] && [[ $INSTANCE -eq 1 ]]
  then
    echo "Error: Failed to start primary."
    exit 1
  fi

  # Create user to be used for replication.  We have to disable synchronous
  # replication for the CREATE USER command as we don't have any available
  # standbys at this point.
  if [[ $INSTANCE -eq 1 ]]
  then
    echo "psql -p ${PORT_LIST[0]} -h localhost -c 'SET SESSION synchronous_commit TO 'off';CREATE USER rep_user REPLICATION;' -d postgres" | write_log
    psql -p ${PORT_LIST[0]} -h localhost -c "SET SESSION synchronous_commit TO 'off';CREATE USER rep_user REPLICATION;" -d postgres >> $LOG_FILE

    if [[ $? -ne 0 ]]
    then
      echo "Error: Failed to connect to primary."
      exit 1
    fi
  fi
done

# Output the final ASCII representation of the replication structure.
echo -e $ASCII_REPORT

if [[ -z $TOOL ]]
then
  create_tool
fi

exit 1
